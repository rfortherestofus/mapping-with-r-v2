---
title: Mapping with R
format:
  rfortherestofus-slides-revealjs:
    menu: false
    progress: false
    slide-number: true
    show-slide-number: print
    center: true
    incremental: true
    auto-animate: true
    slide-level: 4
    output-location: fragment
execute: 
  message: false
  warning: false
  cache: false
  echo: true
title-slide-attributes:
  data-background-image: assets/rru-hex-bg-gradient-dark.svg
  data-background-size: cover
---

```{r}
#| echo: false
options(pillar.sigfig = 7)
```

# Welcome to Course {.inverse}

## Welcome to Mapping with R {.inverse}

### Why making maps with R makes sense

R is a complete GIS tool

### Two types of data: vector and raster. We'll mostly cover vector.

### Make simple maps with ggplot and mapview

#### Access Data

```{r}
library(rnaturalearth)

ne_countries()
```

#### Make simple map with ggplot

```{r}
library(tidyverse)

ne_countries() |>
  ggplot() +
  geom_sf()
```

#### Make simple map with mapview

```{r}
library(mapview)

ne_countries() |>
  mapview()
```

### How course works

# Geospatial Data: Vector Data {.inverse}

## Simple Features Data {.inverse}

::: {.notes}
Talk about how it has become standard

Do same thing I do in [book](https://book.rfortherestofus.com/maps.html#a-brief-primer-on-geospatial-data)
:::

### Always use sf data

![](assets/always-use-sf-heiss.png)

[source](https://datavizs22.classes.andrewheiss.com/slides/12-slides.pdf)

### Learn More

https://r-spatial.github.io/sf/articles/sf1.html

### Geometry Type

#### `POLYGON`

```{r}
library(sf)

wyoming <-
  read_sf("data/wyoming.geojson")

wyoming
```

---

```{r}
ggplot() +
  geom_sf(data = wyoming)
```

#### `POINT`

```{r}
wyoming_one_ev_station <-
  read_sf("data/wyoming-one-ev-station.geojson")

wyoming_one_ev_station
```

---

```{r}
ggplot() +
  geom_sf(data = wyoming) +
  geom_sf(data = wyoming_one_ev_station)
```

#### `LINESTRING`

```{r}
wyoming_highway_30 <-
  read_sf("data/wyoming-highway-30.geojson")

wyoming_highway_30
```

---

```{r}
ggplot() +
  geom_sf(data = wyoming) +
  geom_sf(data = wyoming_highway_30)
```

#### `MULTIPOLYGON`

```{r}
#| echo: false
#| eval: false
fs::file_delete("data/rhode-island.geojson")


read_sf("data/BND_State_1997_spf_-1467871017424358584.geojson") |>
  summarize(geometry = st_combine(geometry)) |>
  write_sf(
    "data/rhode-island.geojson"
  )
```

```{r}
rhode_island <-
  read_sf("data/rhode-island.geojson")

rhode_island
```

---

```{r}
ggplot() +
  geom_sf(data = rhode_island)
```

#### `MULTIPOINT`

```{r}
wyoming_all_ev_stations <-
  read_sf("data/wyoming-all-ev-stations.geojson")

wyoming_all_ev_stations
```

---

```{r}
ggplot() +
  geom_sf(data = wyoming) +
  geom_sf(data = wyoming_all_ev_stations)
```

#### `MULTILINESTRING`

```{r}
wyoming_roads <-
  read_sf("data/wyoming-roads.geojson")

wyoming_roads
```

---

```{r}
ggplot() +
  geom_sf(data = wyoming) +
  geom_sf(data = wyoming_roads)
```

### Dimensions

```{r}
wyoming
```

::: {.notes}
Almost always XY

Z is altitude

M: "an M coordinate (rarely used), denoting some measure that is associated with the point, rather than with the feature as a whole (in which case it would be a feature attribute); examples could be time of measurement, or measurement error of the coordinates"

https://r-spatial.github.io/sf/articles/sf1.html#dimensions
:::

### Bounding Box

```{r}
rhode_island
```

---

```{r}
#| echo: false
rhode_island_bounding_box <-
  rhode_island |>
  st_bbox() |>
  st_as_sfc() |>
  st_sf() |>
  rename(geometry = st_as_sfc.st_bbox.rhode_island..)
```  

```{r}
rhode_island_bounding_box
```

---

```{r}
ggplot() +
  geom_sf(data = rhode_island) +
  geom_sf(
    data = rhode_island_bounding_box,
    color = "red",
    linewidth = 1,
    fill = NA
  )
```

### Coordinate Reference System (CRS) {.inverse}

---

```{r}
wyoming
```

---

```{r}
#| echo: false
wyoming_different_projection <-
  wyoming |>
  st_transform(5070)
```

```{r}
wyoming_different_projection
```

---

```{r}
wyoming |>
  ggplot() +
  geom_sf()
```

---

```{r}
wyoming_different_projection |>
  ggplot() +
  geom_sf()
```


### `geometry` Column {.inverse}

---

```{r}
wyoming
```

```{r}
#| echo: false
wyoming_coordinates <-
  wyoming |>
  st_coordinates() |>
  as_tibble() |>
  rename(longitude = X, latitude = Y) |>
  select(longitude, latitude)
```

. . .

```{r}
wyoming_coordinates
```

---

```{r}
wyoming_coordinates |>
  ggplot(aes(
    x = longitude,
    y = latitude
  )) +
  geom_point()
```

---

```{r}
#| echo: false
#| eval: false
library(gganimate)

wyoming_coordinates_animated <-
  wyoming_coordinates |>
  mutate(row_number = row_number()) |>
  # slice(1:10) |>
  ggplot(aes(
    x = longitude,
    y = latitude,
    group = row_number
  )) +
  geom_point() +
  transition_reveal(row_number)

animate(
  wyoming_coordinates_animated,
  height = 4,
  width = 6,
  units = "in",
  res = 300
)

anim_save("assets/wyoming-animated.gif")
```

![](assets/wyoming-animated.gif)


### Your Turn {.your-turn}

```{r}
#| eval: false
#| echo: false
library(rnaturalearth)
library(tidyverse)
library(sf)

ne_countries(continent = "Africa") |>
  select(admin) |>
  arrange(admin) |>
  write_rds("data/africa.rds")
```


- Run the following code in order to import an `sf` object called `africa`. 

. . .

```{r}
#| echo: true
#| eval: false

library(tidyverse)

africa <-
  read_rds("https://raw.githubusercontent.com/rfortherestofus/mapping-with-r-v2/refs/heads/main/data/africa.rds")
```

### Your Turn {.your-turn}

- Examine your object, ensuring you can identify its geometry type, dimensions, bounding box, coordinate reference system and `geometry` column.

- If you want to try making a static with the `geom_sf()` function from ggplot and/or an interactive map with the `mapview()` function from the {mapview} package.

### Learn More

https://r-spatial.github.io/sf/articles/sf1.html

## Accessing Raw Geospatial Data {.inverse}

### {sf} Package

![](assets/sf.png)

### Geospatial Data Formats: ESRI Shapefile {.inverse}

### ESRI Shapefile

Consists of multiple files: 

1. `.shp`: The main file that contains the geometry data (shapes) of the features.
1. `.shx`: The shape index file, which stores the positional index of the feature geometry to improve access speed.
1. `.dbf`: The attribute format file, which stores attribute data in a tabular format. This file uses the dBase format.

### ESRI Shapefile

In addition to these three mandatory files, there are several optional files that can accompany a shapefile:

- `.prj`: The projection file, which contains coordinate system and projection information.
- `.sbn` and `.sbx`: Spatial index files that improve the speed of spatial queries.
- `.fbn` and `.fbx`: Files used for spatial indexing of features that have been deleted.

### ESRI Shapefile

- `.ain` and `.aih`: Attribute index files that improve the speed of attribute queries.
- `.ixs` and `.mxs`: Geocoding index for read-write and read-only datasets, respectively.
- `.cpg`: The code page file, which specifies the character encoding used in the .dbf file.

### ESRI Shapefile

- [Import city council data from PortlandMaps Open Data](https://gis-pdx.opendata.arcgis.com/datasets/2aec1ba28a6d47b790d59dd831f9bc76_1413/explore?location=45.485228%2C-122.289380%2C9.18)

- Import data with `read_sf()`

---

```{r}
read_sf("data/Portland_City_Council_Districts.shp")
```

---

TODO: center slide

[![](assets/shapefile-airplane-meme.jpg)](https://www.reddit.com/r/gis/comments/sbp8r9/please_find_the_shapefile_attached/)

---

```{r}
read_sf("data/Portland_City_Council_Districts.shp")
```


### Geospatial Data Formats: GeoJSON {.inverse}

### Geospatial Data Formats: GeoJSON

- One file with everything you need embedded within it

- [Import GeoJSON city council data from PortlandMaps Open Data](https://gis-pdx.opendata.arcgis.com/datasets/2aec1ba28a6d47b790d59dd831f9bc76_1413/explore?location=45.485228%2C-122.289380%2C9.18)

---

```{r}
read_sf("data/Portland_City_Council_Districts.geojson")
```

### Geospatial Data Formats: Others {.inverse}

---

TODO: center slide

[![](assets/geospatial-data-formats.png)](https://r.geocompx.org/read-write)

### Geospatial Data Formats: Others

- Almost all file formats can be imported with `read_sf()`


### Your Turn {.your-turn}

- [Download data (ESRI Shapefile or GeoJSON) on Portland sextants](https://gis-pdx.opendata.arcgis.com/datasets/PDX::portland-administrative-sextants/explore)

- Import the data in R using the `read_sf()` function from the `sf` package and save it as `portland_sextants`

- Examine `portland_sextants`, making sure you can identify its geometry type, dimensions, bounding box, coordinate reference system and `geometry` column

### Learn More

https://r-spatial.github.io/sf/articles/sf2.html

## Turning Data Frames into `sf` Objects {.inverse}

```{r}
#| eval: false
#| echo: false

# https://www.portlandmaps.com/metadata/index.cfm?&action=DisplayLayer&LayerID=52777
library(janitor)

portland_corners <-
  read_sf("data/Corners_Improved.geojson") |>
  st_make_valid() |>
  st_centroid()

portland_corners |>
  clean_names() |>
  select(asset_id, ramp_style) |>
  st_coordinates() |>
  as_tibble() |>
  rename(longitude = X, latitude = Y) |>
  write_csv("data/portland-corners.csv")
```

### `st_as_sf()`

```{r}
#| eval: false
library(sf)

csv_file |>
  st_as_sf(
    coords = c("x_variable", "y_variable"),
    crs = 4326
  )
```

::: {.notes}
Talk about having to put variable names in quotes

Talk about crs: show how not adding CRS makes it not show up correctly on map
:::

---

```{r}
portland_corners_csv <-
  read_csv("data/portland-corners.csv")
```

. . .
```{r}
portland_corners_csv
```

---

```{r}
portland_corners_sf <-
  portland_corners_csv |>
  st_as_sf(
    coords = c("longitude", "latitude"),
    crs = 4326
  )
```


. . .

```{r}
portland_corners_sf
```

---

```{r}
portland_corners_sf |>
  mapview::mapview()
```



### Your Turn {.your-turn}

1. [Download this CSV](https://raw.githubusercontent.com/rfortherestofus/mapping-with-r-v2/refs/heads/main/data/portland-traffic-signals.csv) of traffic signal data for the city of Portland

1. Import the CSV and turn it into an `sf` object using `st_as_sf()`

1. Run `mapview::mapview()` to ensure you imported it correctly

## Geocoding {.inverse}

### {tidygeocoder}

![](assets/tidygeocoder.png)

### {tidygeocoder} {.inverse}

### Geocoding a Full Address

```{r}
library(tidyverse)

us_and_uk_head_residences <-
  tribble(
    ~building,
    ~address,
    "White House",
    "1600 Pennsylvania Ave NW, Washington, DC 20500 United States",
    "Number 10",
    "10 Downing St, London SW1A 2AA, United Kingdom"
  )
```

```{r}
library(tidygeocoder)

us_and_uk_head_residences |>
  geocode(address)
```

. . .

```{r}
us_and_uk_head_residences_sf <-
  us_and_uk_head_residences |>
  geocode(address) |>
  st_as_sf(
    coords = c("long", "lat"),
    crs = 4326
  )
```

---

```{r}
us_and_uk_head_residences_sf |>
  mapview::mapview()
```

### Geocoding Services {.inverse}

---

```{r}
us_and_uk_head_residences |>
  geocode(
    address,
    method = "iq"
  )
```

::: {.notes}
Both ArcGIS (https://location.arcgis.com/pricing/#geocoding) and Mapbox (https://www.mapbox.com/pricing) are paid for storing addresses
:::


---

```{r}
us_and_uk_head_residences <-
  tribble(
    ~building,
    ~address,
    ~city,
    ~state,
    ~postal_code,
    ~country,
    "White House",
    "1600 Pennsylvania Ave NW",
    "Washington",
    "DC",
    "20500",
    "United States",
    "Number 10",
    "10 Downing St",
    "London",
    NA,
    "SW1A 2AA",
    "United Kingdom"
  )
```

```{r}
us_and_uk_head_residences |>
  geocode(
    street = address,
    city = city,
    state = state,
    postalcode = postal_code,
    country = country
  )
```

::: {.notes}
Doesn't work for Number 10, which is transition to talking about `method` argument
:::

---

```{r}
#| code-line-numbers: "8"
us_and_uk_head_residences |>
  geocode(
    street = address,
    city = city,
    state = state,
    postalcode = postal_code,
    country = country,
    method = "iq"
  )
```

## Your Turn {.your-turn}

1. Create a tibble with the following starter code for your home address:

. . .

```{r}
#| eval: false

library(tidyverse)

my_address <-
  tribble(
    ~address,
    "Your address goes here"
  )
```

1. Use the {tidygeocoder} package to geocode your address

1. Turn the result into an `sf` object with `st_as_sf()` and plot it on a map with `mapview::mapview()` to make sure it worked
