---
title: Spatial Joins
editor_options: 
  chunk_output_type: console
---

### Figure Out Which Council Districts Have Most Unimproved Corners {.inverse}

::: {.notes}
Show photos of improved + unimproved corners

Link to R for the Rest of Us article on curb cuts
:::

#### Import Data on Corners 

```{r}
#| echo: false
#| eval: false

# library(sf)
# library(tidyverse)
# library(janitor)

# corners_improved <-
#   read_sf("data/Corners_Improved.geojson") |>
#   clean_names() |>
#   # Turn shapes into points for simplicity
#   st_point_on_surface() |>
#   select(objectid, ramp_style)

# fs::file_delete("data/improved_corners.geojson")

# corners_improved |>
#   mutate(
#     ramp_style = case_when(
#       ramp_style %in% c("NONE", "UNKNOWN") ~ "Unimproved",
#       .default = "Improved"
#     )
#   ) |>
#   write_sf("data/improved_corners.geojson")
```

```{r}
library(sf)

improved_corners <-
  read_sf("data/improved_corners.geojson")

improved_corners
```

---

```{r}
# library(mapview)

# improved_corners |>
#   mapview(zcol = "ramp_style")
```

#### Import City Council Districts Data

```{r}
city_council_districts <-
  read_sf("data/city_council_districts.geojson")

city_council_districts
```

#### Which Corners Are in Which Council Districts?

```{r}
st_join(
  city_council_districts,
  improved_corners
)
```

::: {.notes}
This keeps geometry of districts
:::

---

```{r}
st_join(
  improved_corners,
  city_council_districts
)
```

::: {.notes}
This keeps geometry of corners
:::

#### Make Facetted Map with Points {.inverse}

---

```{r}
library(tidyverse)
library(janitor)

unimproved_corners_by_district <-
  st_join(
    improved_corners,
    city_council_districts
  ) |>
  filter(ramp_style == "Unimproved")

portland_boundaries <-
  read_sf("data/Portland_Boundaries.geojson") |>
  clean_names() |>
  filter(cityname == "Portland")
```

---

```{r}
ggplot() +
  geom_sf(
    data = portland_boundaries,
    color = "transparent"
  ) +
  geom_sf(
    data = unimproved_corners_by_district
  ) +
  facet_wrap(vars(district)) +
  theme_void()
```

#### Make Choropleth with Percent in Each District {.inverse}

#### Count Number of Ramps of Each Style in Each District

```{r}
#| eval: false

st_join(
  city_council_districts,
  improved_corners
) |>
  count(district, ramp_style)
```

::: {.notes}
This can be slow
:::

---

```{r}
#| code-line-numbers: "5"

st_join(
  improved_corners,
  city_council_districts
) |>
  st_drop_geometry() |>
  count(district, ramp_style)
```

---

```{r}
#| code-line-numbers: "13"

improved_corners_by_district <-
  st_join(
    improved_corners,
    city_council_districts
  ) |>
  st_drop_geometry() |>
  count(district, ramp_style) |>
  drop_na(district) |>
  group_by(district) |>
  mutate(pct = n / sum(n)) |>
  ungroup() |>
  left_join(city_council_districts, join_by(district)) |>
  st_as_sf()

improved_corners_by_district
```

```{r}
#| eval: false
#| echo: false

improved_corners_by_district |>
  write_sf("data/improved_corners_by_district.geojson")
```

---

```{r}
library(scales)

improved_corners_by_district |>
  filter(ramp_style == "Unimproved") |>
  ggplot() +
  geom_sf(
    aes(fill = pct),
    color = "transparent"
  ) +
  labs(fill = NULL) +
  guides(
    fill = guide_colorsteps(show.limits = TRUE),
    color = guide_colorsteps(show.limits = TRUE),
  ) +
  scale_fill_viridis_c(
    option = "B",
    limits = c(0.65, 0.75),
    labels = percent_format(accuracy = 1)
  ) +
  theme_void() +
  theme(
    legend.position = "top",
    legend.key.width = unit(2, "cm"),
    legend.key.height = unit(0.5, "cm")
  )
```
